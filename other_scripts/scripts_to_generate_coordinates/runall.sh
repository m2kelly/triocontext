#!/bin/bash

# script to process the gencode v19 co-ordinates files to generate meta exons and introns 
# please note that in one of the steps the human genome sequence will be downloaded and it require 3GB disk space

# download the genomic coordinates genocode v19 file
if [ ! -f gencode.v19.annotation.gtf.gz ]
then
   wget ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_human/release_19/gencode.v19.annotation.gtf.gz
fi
    
mkdir tmp
# extract the start and end position of all protein coding genes/transcripts
echo "extracting gene co-ordinates..."
perl extract_gene_coordinates.pl
    
# generate metaExon (exons from non-overlapping genes are considered and the exons are merged at the gene level)
echo "generating meta exons..."
while read line;do arr=($line); grep -w ${arr[0]} tmp/genes_transcripts.bed | sortBed | mergeBed | sed s/$/\\t${arr[0]}\\t${arr[1]}\\t${arr[2]}/;done <<< "`cat tmp/genes_overlap.txt | awk '$7==1 {print $5,$6,$4;}' | sort -u`" | sortBed >tmp/genes_metaExon.bed

# generate metaIntron (introns are generated by subtracting the exon regions from the meta transcript start and end region)
echo "generating meta introns..."
while read line;do arr=($line); exons=`grep -w ${arr[0]} tmp/genes_metaExon.bed`;start=`echo "$exons" | head -1 | cut -f2`;end=`echo "$exons" | tail -1 | cut -f3`;chr=`echo "$exons" | head -1 | cut -f1`;subtractBed -a  <(echo -e "$chr\t$start\t$end") -b <(grep -w ${arr[0]} tmp/genes_metaExon.bed) | sed s/$/\\t${arr[0]}\\t${arr[1]}\\t${arr[2]}/;done <<< "`cat tmp/genes_metaExon.bed | cut -f 4-6 | sort -u`" | sortBed >tmp/genes_metaIntron.bed

# filter out the genes that don't have introns and those that overlap cancer driver genes
echo "applying filters...."
perl apply_filters.pl | grep exon | cut -f 1-6 | sortBed | gzip >tmp/genes_metaExon_filtered.bed.gz
perl apply_filters.pl | grep intron | cut -f 1-6 | sortBed | gzip >tmp/genes_metaIntron_filtered.bed.gz
    
# get middle exons
intersectBed -wo -a tmp/genes_transcripts.bed -b tmp/genes_metaExon_filtered.bed.gz -f 1.0 | perl -sane '{$tmp=join("\t",@F[9..14]);if($F[8]=~/middle/){$middle{$tmp}=1;}else{$others{$tmp}=1;} } END{foreach $d (keys(%middle)){if(!exists $others{$d}){print $d,"\n";}}}' | sortBed | gzip >tmp/genes_metaExon_middle.bed.gz

# remove 5' and 3' UTRs
zcat 01_3utr.regions.gz | sed 's/^/chr/' | perl -sane '$F[1]--;print join("\t",@F),"\n";' | subtractBed -a tmp/genes_metaExon_middle.bed.gz -b stdin | gzip >tmp/genes_metaExon_middle_MINUS3UTR.bed.gz
zcat 01_5utr.regions.gz | sed 's/^/chr/' | perl -sane '$F[1]--;print join("\t",@F),"\n";' | subtractBed -a tmp/genes_metaExon_middle_MINUS3UTR.bed.gz -b stdin | gzip >tmp/genes_metaExon_middle_MINUS3UTR5UTR.bed.gz

# remove exon and introns if it has N in their sequence
# get genomic sequence
echo "downloading genome sequence..."
if [ ! -f human_g1k_v37.fasta ];
then
   wget ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/technical/reference/human_g1k_v37.fasta.gz
   wget ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/technical/reference/human_g1k_v37.fasta.fai
    
   # please note that the following decompression will take around 3GB disk space
   gzip -d human_g1k_v37.fasta.gz
fi

zcat tmp/genes_metaExon_middle_MINUS3UTR5UTR.bed.gz | perl -sane '$astart=$F[1];$F[1]++;$midpoint=int(($F[2]+$F[1])/2);print $F[0],"\t",$midpoint,"\t",$midpoint,"\t",$astart,"\t",$F[2],"\t",$F[3],"\t",$F[4],"\t",$F[5],"\n";' | slopBed -i stdin -g hg19.genome -b 1000 >tmp/exon_flank.bed
perl -sane '$F[0]=~s/chr//g;$F[1]-=2;$F[2]+=1;print $F[0],"\t",$F[1],"\t",$F[2],"\t",join("|",@F),"\n";' tmp/exon_flank.bed | sed 's/chr//g' | fastaFromBed -fi human_g1k_v37.fasta -bed stdin -fo tmp/exon_seq.txt -name;gzip -9 tmp/exon_seq.txt

# for intron
zcat tmp/genes_metaIntron_filtered.bed.gz | perl -sane '$F[0]=~s/chr//g;$F[1]-=2;$F[2]+=1;print $F[0],"\t",$F[1],"\t",$F[2],"\t",join("|",@F),"\n";' |  sed 's/chr//g' | fastaFromBed -fi human_g1k_v37.fasta -bed stdin -fo tmp/intron_seq.txt -name;gzip -9 tmp/intron_seq.txt

# filter out exonic/intronic regions which has 'N' base and generate the final co-ordinates
perl filter_N_base.pl

rm -rf tmp/* human_g1k_v37.fasta human_g1k_v37.fasta.fai

# generate the exon co-ordinates (with position annotation from TSS) that are used in Fig. 1 analysis 
perl get_exon_position_coordinates.pl

rm -rf tmp

echo "completed..."
###########################

## EXTRA STEP: Filter genes at chromosome X and Y

zcat genes_middle_exon_coords.bed.gz | egrep -v '^chr(X|Y)' > genes_middle_exon_coords.bed
gzip -f genes_middle_exon_coords.bed

zcat genes_intron_coords.bed.gz | egrep -v '^chr(X|Y)' > genes_intron_coords.bed
gzip -f genes_intron_coords.bed

zcat genes_exon_coords_filtered.bed.gz | egrep -v '^chr(X|Y)' > genes_exon_coords_filtered.bed
gzip -f genes_exon_coords_filtered.bed
