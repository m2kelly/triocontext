knitr::opts_chunk$set(echo = TRUE)
data_raw <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/germinal_class.bed", header = TRUE, sep="\t")
simple_freqs <- as.data.frame(table(data_raw$sub))
total <- sum(simple_freqs$Freq)
simple_freqs$prop <- simple_freqs$Freq/total
site_freqs <- as.data.frame(table(data_raw$sub, data_raw$site))
site_freqs <- site_freqs[which(site_freqs$Freq != 0), ]
total <- sum(site_freqs$Freq)
site_freqs$prop <- site_freqs$Freq/total
meh <- as.data.frame(table(data_raw$sample,data_raw$sub,data_raw$site))
meh <- meh[which(meh$Freq != 0), ]
colnames(meh) <- c('sample', 'mut', 'site', 'count')
rel_freqs <- read.table("~/Desktop/Mutation_project/notebooks_extended/data/CpGmer.txt", header = FALSE, sep="\t")
colnames(rel_freqs) <- c('nt', 'count')
A_Tfreq <- sum(rel_freqs[which((rel_freqs$nt == 'T') | (rel_freqs$nt == 'A')), ]$count)
CpGfreq <- sum(rel_freqs[which((rel_freqs$nt == 'CpG') | (rel_freqs$nt == 'GpC')), ]$count)
nonCpGfreq <- sum(rel_freqs[which((rel_freqs$nt == 'nonCpG') | (rel_freqs$nt == 'nonGpC')), ]$count)
total <- sum(as.numeric(rel_freqs$count))
A_Tfreq = A_Tfreq/total
CpGfreq = CpGfreq/total
nonCpGfreq = nonCpGfreq/total
meh$corrected <- ifelse( ((meh$mut == 'T>A') | (meh$mut == 'T>C') | (meh$mut == 'T>G')), meh$count/A_Tfreq,
ifelse( (((meh$mut == 'C>A') | (meh$mut == 'C>G') | (meh$mut == 'C>T')) & (meh$site == 'CpG')), meh$count/CpGfreq,
ifelse( (((meh$mut == 'C>A') | (meh$mut == 'C>G') | (meh$mut == 'C>T')) & (meh$site == 'nonCpG')), meh$count/nonCpGfreq, NA)))
meh$freq <- 0.0
meh$freq <- apply(meh, 1, FUN = function (x) {
as.integer(x["corrected"]) / sum(meh[meh$sample %in% x["sample"],"corrected"])
})
meh$se <- apply(meh, 1, FUN = function (x) {
sqrt(as.numeric(x["freq"])*(1-as.numeric(x["freq"]))/ sum(meh[meh$sample %in% x["sample"],"corrected"]))
})
meh
library(ggplot2)
tiff('Spectra1.tiff', units="in", width=7, height=4, res=300, compression = 'lzw')
studies = c("GoNL (n=11,016)", "Sasani (n=27,454)", "Goldmann 2016 (n=35,793)", "Goldmann 2018 (n=73,755)", "Yuen (n=117,739)", "Halldorsson (n=180,151)", "An (n=233,639)")
studies2 = c("An (n=233,639)", "Goldmann 2016 (n=35,793)","Goldmann 2018 (n=73,755)", "GoNL (n=11,016)", "Halldorsson (n=180,151)", "Sasani (n=27,454)" , "Yuen (n=117,739)")
levels(meh$sample)<-studies2
meh$sample <- factor(meh$sample, levels = studies)
plot <- ggplot(meh, aes(x = mut, y = freq, fill = sample)) + geom_bar(stat="identity", position = "dodge") + facet_grid(site~., scales="free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.title = element_blank())
plot + geom_errorbar(aes(ymin=freq-2.57*se, ymax=freq+2.57*se), size=0.5, width=.25, position=position_dodge(.9)) + ylab("Proportion") + xlab("Class")
dev.off()
data_raw <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/germinal_class.bed", header = TRUE, sep="\t")
data_raw$sample <- as.character(data_raw$sample)
data_raw <- within(data_raw, sample[sample == 'An2019' & class == 'control'] <- 'Healthy An')
data_raw <- within(data_raw, sample[sample == 'An2019' & class == 'autism'] <- 'Autism An')
data_raw <- within(data_raw, sample[sample == 'Yuen2017' & class == 'control'] <- 'Healthy Yuen')
data_raw <- within(data_raw, sample[sample == 'Yuen2017' & class == 'autism'] <- 'Autism Yuen')
data_raw$sample <- as.factor(data_raw$sample)
meh <- as.data.frame(table(data_raw$sample,data_raw$sub,data_raw$site))
meh <- meh[which(meh$Freq != 0), ]
colnames(meh) <- c('sample', 'mut', 'site', 'count')
rel_freqs <- read.table("~/Desktop/Mutation_project/notebooks_extended/data/CpGmer.txt", header = FALSE, sep="\t")
colnames(rel_freqs) <- c('nt', 'count')
A_Tfreq <- sum(rel_freqs[which((rel_freqs$nt == 'T') | (rel_freqs$nt == 'A')), ]$count)
CpGfreq <- sum(rel_freqs[which((rel_freqs$nt == 'CpG') | (rel_freqs$nt == 'GpC')), ]$count)
nonCpGfreq <- sum(rel_freqs[which((rel_freqs$nt == 'nonCpG') | (rel_freqs$nt == 'nonGpC')), ]$count)
total <- sum(as.numeric(rel_freqs$count))
A_Tfreq = A_Tfreq/total
CpGfreq = CpGfreq/total
nonCpGfreq = nonCpGfreq/total
meh$corrected <- ifelse( ((meh$mut == 'T>A') | (meh$mut == 'T>C') | (meh$mut == 'T>G')), meh$count/A_Tfreq,
ifelse( (((meh$mut == 'C>A') | (meh$mut == 'C>G') | (meh$mut == 'C>T')) & (meh$site == 'CpG')), meh$count/CpGfreq,
ifelse( (((meh$mut == 'C>A') | (meh$mut == 'C>G') | (meh$mut == 'C>T')) & (meh$site == 'nonCpG')), meh$count/nonCpGfreq, NA)))
meh$freq <- 0.0
meh$freq <- apply(meh, 1, FUN = function (x) {
as.integer(x["corrected"]) / sum(meh[meh$sample %in% x["sample"],"corrected"])
})
meh$se <- apply(meh, 1, FUN = function (x) {
sqrt(as.numeric(x["freq"])*(1-as.numeric(x["freq"]))/ sum(meh[meh$sample %in% x["sample"],"corrected"]))
})
meh
data_raw <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/germinal_class.bed", header = TRUE, sep="\t")
data_raw$sample <- as.character(data_raw$sample)
data_raw <- within(data_raw, sample[sample == 'An2019' & class == 'healthy'] <- 'Healthy An')
data_raw <- within(data_raw, sample[sample == 'An2019' & class == 'autism'] <- 'Autism An')
data_raw <- within(data_raw, sample[sample == 'Yuen2017' & class == 'healthy'] <- 'Healthy Yuen')
data_raw <- within(data_raw, sample[sample == 'Yuen2017' & class == 'autism'] <- 'Autism Yuen')
data_raw$sample <- as.factor(data_raw$sample)
meh <- as.data.frame(table(data_raw$sample,data_raw$sub,data_raw$site))
meh <- meh[which(meh$Freq != 0), ]
colnames(meh) <- c('sample', 'mut', 'site', 'count')
rel_freqs <- read.table("~/Desktop/Mutation_project/notebooks_extended/data/CpGmer.txt", header = FALSE, sep="\t")
colnames(rel_freqs) <- c('nt', 'count')
A_Tfreq <- sum(rel_freqs[which((rel_freqs$nt == 'T') | (rel_freqs$nt == 'A')), ]$count)
CpGfreq <- sum(rel_freqs[which((rel_freqs$nt == 'CpG') | (rel_freqs$nt == 'GpC')), ]$count)
nonCpGfreq <- sum(rel_freqs[which((rel_freqs$nt == 'nonCpG') | (rel_freqs$nt == 'nonGpC')), ]$count)
total <- sum(as.numeric(rel_freqs$count))
A_Tfreq = A_Tfreq/total
CpGfreq = CpGfreq/total
nonCpGfreq = nonCpGfreq/total
meh$corrected <- ifelse( ((meh$mut == 'T>A') | (meh$mut == 'T>C') | (meh$mut == 'T>G')), meh$count/A_Tfreq,
ifelse( (((meh$mut == 'C>A') | (meh$mut == 'C>G') | (meh$mut == 'C>T')) & (meh$site == 'CpG')), meh$count/CpGfreq,
ifelse( (((meh$mut == 'C>A') | (meh$mut == 'C>G') | (meh$mut == 'C>T')) & (meh$site == 'nonCpG')), meh$count/nonCpGfreq, NA)))
meh$freq <- 0.0
meh$freq <- apply(meh, 1, FUN = function (x) {
as.integer(x["corrected"]) / sum(meh[meh$sample %in% x["sample"],"corrected"])
})
meh$se <- apply(meh, 1, FUN = function (x) {
sqrt(as.numeric(x["freq"])*(1-as.numeric(x["freq"]))/ sum(meh[meh$sample %in% x["sample"],"corrected"]))
})
meh
library(ggplot2)
tiff('Spectra2.tiff', units="in", width=7, height=4, res=300, compression = 'lzw')
studies = c("Autism An (n=115,697)","Control Werling (n=32,762)","GoNL (n=11,016)","Goldmann 2018 (n=73,755)","Autism Werling (n=33,604)", "Autism Yuen (n=117,612)", "Goldmann 2016 (n=35,793)", "Jonnson (n=98,204)")
studies2 = c("Autism An (n=115,697)", "Autism Yuen (n=117,612)", "Goldmann 2016 (n=35,793)", "Goldmann 2018 (n=73,755)", "GoNL (n=11,016)", "Halldorsson (n=180,151)", "Healthy An (n=115,697)", "Healthy Yuen (n=117,612)", "Sasani (n=27,454)")
levels(meh$sample)<-studies2
meh$sample <- factor(meh$sample, levels = studies)
meh$class <- as.factor(rep(c('Autism', 'Autism', 'Mixed','Healthy', 'Random', 'Mixed', 'Healthy', 'Healthy', 'Random'),9))
plot <- ggplot(meh, aes(x = mut, y = freq, fill = sample)) + geom_bar(stat="identity", position = "dodge") + facet_grid(site~class, scales="free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.title = element_blank())
plot + geom_errorbar(aes(ymin=freq-2.57*se, ymax=freq+2.57*se), size=0.5, width=.25, position=position_dodge(.9)) + ylab("Proportion") + xlab("Class")
dev.off()
library(ggplot2)
tiff('Spectra2.tiff', units="in", width=7, height=4, res=300, compression = 'lzw')
studies = c("Autism An (n=115,697)", "Healthy An (n=115,697)", "Autism Yuen (n=117,612)", "Healthy Yuen (n=127)", "Goldmann 2016 (n=35,793)", "Goldmann 2018 (n=73,755)", "GoNL (n=11,016)", "Halldorsson (n=180,151)", "Healthy An (n=115,697)", "Sasani (n=27,454)")
studies2 = c("Autism An (n=115,697)", "Autism Yuen (n=117,612)", "Goldmann 2016 (n=35,793)", "Goldmann 2018 (n=73,755)", "GoNL (n=11,016)", "Halldorsson (n=180,151)", "Healthy An (n=115,697)", "Healthy Yuen (n=127)", "Sasani (n=27,454)")
levels(meh$sample)<-studies2
meh$sample <- factor(meh$sample, levels = studies)
library(ggplot2)
tiff('Spectra2.tiff', units="in", width=7, height=4, res=300, compression = 'lzw')
studies = c("Autism An (n=117,942)", "Healthy An (n=115,697)", "Autism Yuen (n=117,612)", "Healthy Yuen (n=127)", "Goldmann 2016 (n=35,793)", "Goldmann 2018 (n=73,755)", "GoNL (n=11,016)", "Halldorsson (n=180,151)", "Healthy An (n=115,697)", "Sasani (n=27,454)")
studies2 = c("Autism An (n=117,942)", "Autism Yuen (n=117,612)", "Goldmann 2016 (n=35,793)", "Goldmann 2018 (n=73,755)", "GoNL (n=11,016)", "Halldorsson (n=180,151)", "Healthy An (n=115,697)", "Healthy Yuen (n=127)", "Sasani (n=27,454)")
levels(meh$sample)<-studies2
meh$sample <- factor(meh$sample, levels = studies)
data_raw <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/germinal_class.bed", header = TRUE, sep="\t")
data_raw$sample <- as.character(data_raw$sample)
data_raw <- within(data_raw, sample[sample == 'An2019' & class == 'healthy'] <- 'Healthy An')
data_raw <- within(data_raw, sample[sample == 'An2019' & class == 'autism'] <- 'Autism An')
data_raw <- within(data_raw, sample[sample == 'Yuen2017' & class == 'healthy'] <- 'Healthy Yuen')
data_raw <- within(data_raw, sample[sample == 'Yuen2017' & class == 'autism'] <- 'Autism Yuen')
data_raw$sample <- as.factor(data_raw$sample)
meh <- as.data.frame(table(data_raw$sample,data_raw$sub,data_raw$site))
meh <- meh[which(meh$Freq != 0), ]
colnames(meh) <- c('sample', 'mut', 'site', 'count')
rel_freqs <- read.table("~/Desktop/Mutation_project/notebooks_extended/data/CpGmer.txt", header = FALSE, sep="\t")
colnames(rel_freqs) <- c('nt', 'count')
A_Tfreq <- sum(rel_freqs[which((rel_freqs$nt == 'T') | (rel_freqs$nt == 'A')), ]$count)
CpGfreq <- sum(rel_freqs[which((rel_freqs$nt == 'CpG') | (rel_freqs$nt == 'GpC')), ]$count)
nonCpGfreq <- sum(rel_freqs[which((rel_freqs$nt == 'nonCpG') | (rel_freqs$nt == 'nonGpC')), ]$count)
total <- sum(as.numeric(rel_freqs$count))
A_Tfreq = A_Tfreq/total
CpGfreq = CpGfreq/total
nonCpGfreq = nonCpGfreq/total
meh$corrected <- ifelse( ((meh$mut == 'T>A') | (meh$mut == 'T>C') | (meh$mut == 'T>G')), meh$count/A_Tfreq,
ifelse( (((meh$mut == 'C>A') | (meh$mut == 'C>G') | (meh$mut == 'C>T')) & (meh$site == 'CpG')), meh$count/CpGfreq,
ifelse( (((meh$mut == 'C>A') | (meh$mut == 'C>G') | (meh$mut == 'C>T')) & (meh$site == 'nonCpG')), meh$count/nonCpGfreq, NA)))
meh$freq <- 0.0
meh$freq <- apply(meh, 1, FUN = function (x) {
as.integer(x["corrected"]) / sum(meh[meh$sample %in% x["sample"],"corrected"])
})
meh$se <- apply(meh, 1, FUN = function (x) {
sqrt(as.numeric(x["freq"])*(1-as.numeric(x["freq"]))/ sum(meh[meh$sample %in% x["sample"],"corrected"]))
})
library(ggplot2)
tiff('Spectra2.tiff', units="in", width=7, height=4, res=300, compression = 'lzw')
studies = c("Autism An (n=117,942)", "Healthy An (n=115,697)", "Autism Yuen (n=117,612)", "Healthy Yuen (n=127)", "Goldmann 2016 (n=35,793)", "Goldmann 2018 (n=73,755)", "GoNL (n=11,016)", "Halldorsson (n=180,151)", "Healthy An (n=115,697)", "Sasani (n=27,454)")
studies2 = c("Autism An (n=117,942)", "Autism Yuen (n=117,612)", "Goldmann 2016 (n=35,793)", "Goldmann 2018 (n=73,755)", "GoNL (n=11,016)", "Halldorsson (n=180,151)", "Healthy An (n=115,697)", "Healthy Yuen (n=127)", "Sasani (n=27,454)")
levels(meh$sample)<-studies2
meh$sample <- factor(meh$sample, levels = studies)
data_raw <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/germinal_class.bed", header = TRUE, sep="\t")
data_raw$sample <- as.character(data_raw$sample)
data_raw <- within(data_raw, sample[sample == 'An2019' & class == 'healthy'] <- 'Healthy An')
data_raw <- within(data_raw, sample[sample == 'An2019' & class == 'autism'] <- 'Autism An')
data_raw <- within(data_raw, sample[sample == 'Yuen2017' & class == 'healthy'] <- 'Healthy Yuen')
data_raw <- within(data_raw, sample[sample == 'Yuen2017' & class == 'autism'] <- 'Autism Yuen')
data_raw$sample <- as.factor(data_raw$sample)
meh <- as.data.frame(table(data_raw$sample,data_raw$sub,data_raw$site))
meh <- meh[which(meh$Freq != 0), ]
colnames(meh) <- c('sample', 'mut', 'site', 'count')
rel_freqs <- read.table("~/Desktop/Mutation_project/notebooks_extended/data/CpGmer.txt", header = FALSE, sep="\t")
colnames(rel_freqs) <- c('nt', 'count')
A_Tfreq <- sum(rel_freqs[which((rel_freqs$nt == 'T') | (rel_freqs$nt == 'A')), ]$count)
CpGfreq <- sum(rel_freqs[which((rel_freqs$nt == 'CpG') | (rel_freqs$nt == 'GpC')), ]$count)
nonCpGfreq <- sum(rel_freqs[which((rel_freqs$nt == 'nonCpG') | (rel_freqs$nt == 'nonGpC')), ]$count)
total <- sum(as.numeric(rel_freqs$count))
A_Tfreq = A_Tfreq/total
CpGfreq = CpGfreq/total
nonCpGfreq = nonCpGfreq/total
meh$corrected <- ifelse( ((meh$mut == 'T>A') | (meh$mut == 'T>C') | (meh$mut == 'T>G')), meh$count/A_Tfreq,
ifelse( (((meh$mut == 'C>A') | (meh$mut == 'C>G') | (meh$mut == 'C>T')) & (meh$site == 'CpG')), meh$count/CpGfreq,
ifelse( (((meh$mut == 'C>A') | (meh$mut == 'C>G') | (meh$mut == 'C>T')) & (meh$site == 'nonCpG')), meh$count/nonCpGfreq, NA)))
meh$freq <- 0.0
meh$freq <- apply(meh, 1, FUN = function (x) {
as.integer(x["corrected"]) / sum(meh[meh$sample %in% x["sample"],"corrected"])
})
meh$se <- apply(meh, 1, FUN = function (x) {
sqrt(as.numeric(x["freq"])*(1-as.numeric(x["freq"]))/ sum(meh[meh$sample %in% x["sample"],"corrected"]))
})
meh
library(ggplot2)
tiff('Spectra2.tiff', units="in", width=7, height=4, res=300, compression = 'lzw')
studies = c("Autism An (n=117,942)", "Healthy An (n=115,697)", "Autism Yuen (n=117,612)", "Healthy Yuen (n=127)", "Goldmann 2016 (n=35,793)", "Goldmann 2018 (n=73,755)", "GoNL (n=11,016)", "Halldorsson (n=180,151)", "Sasani (n=27,454)")
studies2 = c("Autism An (n=117,942)", "Autism Yuen (n=117,612)", "Goldmann 2016 (n=35,793)", "Goldmann 2018 (n=73,755)", "GoNL (n=11,016)", "Halldorsson (n=180,151)", "Healthy An (n=115,697)", "Healthy Yuen (n=127)", "Sasani (n=27,454)")
levels(meh$sample)<-studies2
meh$sample <- factor(meh$sample, levels = studies)
meh$class <- as.factor(rep(c('Autism', 'Autism', 'Mixed', 'Healthy', 'Random', 'Mixed', 'Healthy', 'Healthy', 'Random'),9))
plot <- ggplot(meh, aes(x = mut, y = freq, fill = sample)) + geom_bar(stat="identity", position = "dodge") + facet_grid(site~class, scales="free_y") + theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.title = element_blank())
plot + geom_errorbar(aes(ymin=freq-2.57*se, ymax=freq+2.57*se), size=0.5, width=.25, position=position_dodge(.9)) + ylab("Proportion") + xlab("Class")
dev.off()
library(Rarity)
#Load file
data_raw <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/3mer_signatures_DNM_new.txt", header = TRUE, sep="\t")
colnames(data_raw) <- c("Mut","Direct_estimation")
data_raw2 <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/3mer_DNM_signatures_decomp.txt", header = TRUE, sep="\t")
colnames(data_raw2) <- c("Mut","Decomposition_estimation")
data_merge <- merge(data_raw, data_raw2, by = "Mut")
# Not normally distributed
shapiro.test(data_merge$Direct_estimation)
tiff('3mer_correl_spearman_directVSdecomp.tiff', units="in", width=7, height=4, res=300, compression = 'lzw')
corPlot(data_merge[,2:ncol(data_merge)], method = "spearman")
dev.off()
library(ggplot2)
tiff('3-mer_correlation.tiff', units="in", width=7, height=4, res=300, compression = 'lzw')
ggplot(data_merge, aes(x = Direct_estimation, y = Decomposition_estimation)) + geom_point() + scale_x_log10() + scale_y_log10() + geom_smooth(method=lm)  + geom_abline(intercept = 0, slope = 1, colour = "red") +
labs(title = "3-mer probabilities Direct vs Decomposition method", y = "Probability from decomposition", x= "Probability directly estimated") + theme(text = element_text(size=12))
dev.off()
library(Rarity)
#Load file
data_raw <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/3mer_signatures_DNM_new.txt", header = TRUE, sep="\t")
colnames(data_raw) <- c("Mut","Direct_estimation")
data_raw2 <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/3mer_DNM_signatures_decomp.txt", header = TRUE, sep="\t")
colnames(data_raw2) <- c("Mut","Decomposition_estimation")
data_merge <- merge(data_raw, data_raw2, by = "Mut")
# Not normally distributed
shapiro.test(data_merge$Direct_estimation)
tiff('3mer_correl_pearson_directVSdecomp.tiff', units="in", width=7, height=4, res=300, compression = 'lzw')
corPlot(data_merge[,2:ncol(data_merge)], method = "pearson")
dev.off()
library(Rarity)
#Load file
data_raw <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/5mer_signatures_DNM_new.txt", header = TRUE, sep="\t")
colnames(data_raw) <- c("Mut","Direct_estimation")
data_raw2 <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/5mer_DNM_signatures_decomp.txt", header = TRUE, sep="\t")
colnames(data_raw2) <- c("Mut","Decomposition_estimation")
data_merge <- merge(data_raw, data_raw2, by = "Mut")
# Not normally distributed
shapiro.test(data_merge$Direct_estimation)
tiff('5mer_correl_spearman_directVSdecomp.tiff', units="in", width=7, height=4, res=300, compression = 'lzw')
corPlot(data_merge[,2:ncol(data_merge)], method = "spearman")
dev.off()
library(Rarity)
#Load file
data_raw <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/5mer_signatures_DNM_new.txt", header = TRUE, sep="\t")
colnames(data_raw) <- c("Mut","Direct_estimation")
data_raw2 <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/5mer_DNM_signatures_decomp.txt", header = TRUE, sep="\t")
colnames(data_raw2) <- c("Mut","Decomposition_estimation")
data_merge <- merge(data_raw, data_raw2, by = "Mut")
# Not normally distributed
shapiro.test(data_merge$Direct_estimation)
tiff('5mer_correl_pearson_directVSdecomp.tiff', units="in", width=7, height=4, res=300, compression = 'lzw')
corPlot(data_merge[,2:ncol(data_merge)], method = "pearson")
dev.off()
library(ggplot2)
tiff('5-mer_correlation.tiff', units="in", width=7, height=4, res=300, compression = 'lzw')
ggplot(data_merge, aes(x = Direct_estimation, y = Decomposition_estimation)) + geom_point() + scale_x_log10() + scale_y_log10() + geom_smooth(method=lm)  + geom_abline(intercept = 0, slope = 1, colour = "red") +
labs(title = "5-mer probabilities Direct vs Decomposition method", y = "Probability from decomposition", x= "Probability directly estimated") + theme(text = element_text(size=12))
dev.off()
library(Rarity)
#Load file
data_raw <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/7mer_signatures_DNM_new.txt", header = TRUE, sep="\t")
colnames(data_raw) <- c("Mut","Direct_estimation")
data_raw2 <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/7mer_DNM_signatures_decomp.txt", header = TRUE, sep="\t")
colnames(data_raw2) <- c("Mut","Decomposition_estimation")
data_merge <- merge(data_raw, data_raw2, by = "Mut")
# Not normally distributed
shapiro.test(data_merge$Direct_estimation)
library(Rarity)
#Load file
data_raw <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/7mer_signatures_DNM_new.txt", header = TRUE, sep="\t")
data_raw2 <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/7mer_DNM_signatures_decomp.txt", header = TRUE, sep="\t")
data_merge <- merge(data_raw, data_raw2, by = "Mut")
data_raw
library(Rarity)
#Load file
data_raw <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/7mer_signatures_DNM_new.txt", header = TRUE, sep="\t")
colnames(data_raw) <- c("Mut","Direct_estimation")
data_raw
data_raw2 <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/7mer_DNM_signatures_decomp.txt", header = TRUE, sep="\t")
colnames(data_raw2) <- c("Mut","Decomposition_estimation")
data_raw2
data_merge <- merge(data_raw, data_raw2, by = "Mut")
tiff('7mer_correl_spearman_directVSdecomp.tiff', units="in", width=7, height=4, res=300, compression = 'lzw')
corPlot(data_merge[,2:ncol(data_merge)], method = "spearman")
corPlot(data_merge[,2:ncol(data_merge)], method = "spearman")
dev.off()
library(Rarity)
#Load file
data_raw <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/7mer_signatures_DNM_new.txt", header = TRUE, sep="\t")
colnames(data_raw) <- c("Mut","Direct_estimation")
data_raw2 <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/7mer_DNM_signatures_decomp.txt", header = TRUE, sep="\t")
colnames(data_raw2) <- c("Mut","Decomposition_estimation")
data_merge <- merge(data_raw, data_raw2, by = "Mut")
# Not normally distributed
#shapiro.test(data_merge$Direct_estimation)
tiff('7mer_correl_pearson_directVSdecomp.tiff', units="in", width=7, height=4, res=300, compression = 'lzw')
corPlot(data_merge[,2:ncol(data_merge)], method = "pearson")
dev.off()
library(Rarity)
#Load file
data_raw <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/7mer_signatures_DNM_new.txt", header = TRUE, sep="\t")
colnames(data_raw) <- c("Mut","Direct_estimation")
data_raw2 <- read.table("~/Desktop/Mutation_project/notebooks_extended/results/7mer_DNM_signatures_decomp.txt", header = TRUE, sep="\t")
colnames(data_raw2) <- c("Mut","Decomposition_estimation")
data_merge <- merge(data_raw, data_raw2, by = "Mut")
# Not normally distributed
#shapiro.test(data_merge$Direct_estimation)
tiff('7mer_correl_spearman_directVSdecomp.tiff', units="in", width=7, height=4, res=300, compression = 'lzw')
corPlot(data_merge[,2:ncol(data_merge)], method = "spearman")
dev.off()
library(ggplot2)
tiff('7-mer_correlation.tiff', units="in", width=7, height=4, res=300, compression = 'lzw')
ggplot(data_merge, aes(x = Direct_estimation, y = Decomposition_estimation)) + geom_point() + scale_x_log10() + scale_y_log10() + geom_smooth(method=lm)  + geom_abline(intercept = 0, slope = 1, colour = "red") +
labs(title = "7-mer probabilities Direct vs Decomposition method", y = "Probability from decomposition", x= "Probability directly estimated") + theme(text = element_text(size=12))
dev.off()
tiff('correl_directVSdecomp.tiff', units="in", width=7, height=12, res=300, compression = 'lzw')
ggarrange(p1, p2, p3, ncol = 1, nrow = 3)
library(ggpubr)
install.packages(ggpubr)
install.packages("ggpubr")
library(ggpubr)
install.packages("cowplot")
